# Rigol_DG4000_ChN.db

# Mark Rivers
# March 11, 2025

# Database file for Rigol DG4000 series Arbitrary Waveform Generator
# This file is loaded once for each channel N.
#
# This support uses StreamDevice.
# It supports many of the features of the device.  
# - It does not current support Modulation
# - It only supports the basic internal waveforms (sin, square, ramp, pulse, noise, and harmonic.), plus user-defined.
#
# The device has 16K channels of user-defineable waveform memory per channel.
#
# The UserWF waveform record has FTVL=DOUBLE, and the waveform values must be in the range -1 to +1.
# The actual waveform output is controlled by the Frequency, Amplitude, Phase, and Offset settings.
# The number of values written to UserWF can be any length between 2 and the value of NELM used when loading the database. 
#
# Macro parameters required when loading this database:
#  P = Record name prefix
#  R = Base record name
#  N = Channel number (1 or 2))
#  PORT = Name of asyn port for the VXI-11 driver for the device
#  NELM = Maximum number of elements in the UserWaveform waveform record
#


###
### Source control
###
record(mbbo,"$(P)$(R)Ch$(N):Shape") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setString(:SOUR$(N):FUNC:SHAP) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "SIN")
    field(ONVL, "1")
    field(ONST, "SQU")
    field(TWVL, "2")
    field(TWST, "RAMP")
    field(THVL, "3")
    field(THST, "PULSE")
    field(FRVL, "4")
    field(FRST, "NOISE")
    field(FVVL, "5")
    field(FVST, "USER")
    field(SXVL, "6")
    field(SXST, "HARMONIC")
    field(SVVL, "7")
    field(FLNK, "$(P)$(R)Ch$(N):Shape_RBV.PROC")
}

record(mbbi,"$(P)$(R)Ch$(N):Shape_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getString(:SOUR$(N):FUNC:SHAP) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "SIN")
    field(ONVL, "1")
    field(ONST, "SQU")
    field(TWVL, "2")
    field(TWST, "RAMP")
    field(THVL, "3")
    field(THST, "PULSE")
    field(FRVL, "4")
    field(FRST, "NOISE")
    field(FVVL, "5")
    field(FVST, "USER")
    field(SXVL, "6")
    field(SXST, "HARMONIC")
    field(SVVL, "7")
}

record(ao,"$(P)$(R)Ch$(N):SquDuty") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setFloat(:SOUR$(N):FUNC:SQU:DCYC) $(PORT)")
    field(DRVL, "20")
    field(DRVH, "80")
    field(LOPR, "20")
    field(HOPR, "80")
    field(PREC, "1")
    field(VAL,  "50")
    field(FLNK, "$(P)$(R)Ch$(N):SquDuty_RBV.PROC")
}

record(ai,"$(P)$(R)Ch$(N):SquDuty_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getFloat(:SOUR$(N):FUNC:SQU:DCYC) $(PORT)")
    field(LOPR, "20")
    field(HOPR, "80")
    field(PREC, "1")
}

record(ao,"$(P)$(R)Ch$(N):PulseDelay") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setFloat(:SOUR$(N):PULS:DEL) $(PORT)")
    field(PREC, "$(PREC=4)")
    field(FLNK, "$(P)$(R)Ch$(N):PulseDelay_RBV.PROC")
}

record(ai,"$(P)$(R)Ch$(N):PulseDelay_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getFloat(:SOUR$(N):PULS:DEL) $(PORT)")
    field(PREC, "$(PREC=4)")
}

record(ao,"$(P)$(R)Ch$(N):PulseWidth") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setFloat(:SOUR$(N):PULS:WIDT) $(PORT)")
    field(PREC, "$(PREC=4)")
    field(FLNK, "$(P)$(R)Ch$(N):PulseWidth_RBV.PROC")
}

record(ai,"$(P)$(R)Ch$(N):PulseWidth_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getFloat(:SOUR$(N):PULS:WIDT) $(PORT)")
    field(PREC, "$(PREC=4)")
}

record(ao,"$(P)$(R)Ch$(N):PulseRise") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setFloat(:SOUR$(N):PULS:TRAN:LEAD) $(PORT)")
    field(PREC, "$(PREC=4)")
    field(FLNK, "$(P)$(R)Ch$(N):PulseRise_RBV.PROC")
}

record(ai,"$(P)$(R)Ch$(N):PulseRise_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getFloat(:SOUR$(N):PULS:TRAN:LEAD) $(PORT)")
    field(PREC, "1")
}

record(ao,"$(P)$(R)Ch$(N):PulseFall") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setFloat(:SOUR$(N):PULS:TRAN:TRA) $(PORT)")
    field(PREC, "$(PREC=4)")
    field(FLNK, "$(P)$(R)Ch$(N):PulseFall_RBV.PROC")
}

record(ai,"$(P)$(R)Ch$(N):PulseFall_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getFloat(:SOUR$(N):PULS:TRAN:TRA) $(PORT)")
    field(PREC, "$(PREC=4)")
}

record(ao,"$(P)$(R)Ch$(N):RampSymmetry") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setFloat(:SOUR$(N):FUNC:RAMP:SYMM) $(PORT)")
    field(DRVL, "0")
    field(DRVH, "100")
    field(LOPR, "0")
    field(HOPR, "100")
    field(PREC, "1")
    field(FLNK, "$(P)$(R)Ch$(N):RampSymmetry_RBV.PROC")
}

record(ai,"$(P)$(R)Ch$(N):RampSymmetry_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getFloat(:SOUR$(N):FUNC:RAMP:SYMM) $(PORT)")
    field(LOPR, "0")
    field(HOPR, "100")
    field(PREC, "1")
}

record(ao,"$(P)$(R)Ch$(N):Frequency") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setFloat(:SOUR$(N):FREQ:FIX) $(PORT)")
    field(DRVL, "1.e-6")
    field(DRVH, "160.e6")
    field(LOPR, "1.e-6")
    field(HOPR, "160.e6")
    field(PREC, "$(PREC=4)")
    field(VAL,  "1.e6")
    field(FLNK, "$(P)$(R)Ch$(N):Frequency_RBV.PROC")
}

record(ai,"$(P)$(R)Ch$(N):Frequency_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getFloat(:SOUR$(N):FREQ:FIX) $(PORT)")
    field(LOPR, "1.e-6")
    field(HOPR, "160.e6")
    field(PREC, "$(PREC=4)")
}

record(ao,"$(P)$(R)Ch$(N):Amplitude") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setFloat(:SOUR$(N):VOLT:LEV:IMM:AMPL) $(PORT)")
    field(DRVL, ".01")
    field(DRVH, "9.99")
    field(LOPR, "0.01")
    field(HOPR, "9.99")
    field(PREC, "$(PREC=4)")
    field(VAL,  "5.0")
    field(FLNK, "$(P)$(R)Ch$(N):Amplitude_RBV.PROC")
}

record(ai,"$(P)$(R)Ch$(N):Amplitude_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getFloat(:SOUR$(N):VOLT:LEV:IMM:AMPL) $(PORT)")
    field(LOPR, "0.01")
    field(HOPR, "9.99")
    field(PREC, "$(PREC=4)")
}

record(ao,"$(P)$(R)Ch$(N):Phase") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setFloat(:SOUR$(N):PHAS) $(PORT)")
    field(DRVL, "0")
    field(DRVH, "360")
    field(LOPR, "0")
    field(HOPR, "360")
    field(PREC, "$(PREC=4)")
    field(FLNK, "$(P)$(R)Ch$(N):Phase_RBV.PROC")
}

record(ai,"$(P)$(R)Ch$(N):Phase_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getFloat(:SOUR$(N):PHAS) $(PORT)")
    field(LOPR, "0")
    field(HOPR, "360")
    field(PREC, "$(PREC=4)")
}

record(ao,"$(P)$(R)Ch$(N):Offset") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setFloat(:SOUR$(N):VOLT:LEV:IMM:OFFS) $(PORT)")
    field(DRVL, "-4.50")
    field(DRVH, "4.50")
    field(LOPR, "-4.50")
    field(HOPR, "4.50")
    field(PREC, "$(PREC=4)")
    field(VAL,  "0.0")
    field(FLNK, "$(P)$(R)Ch$(N):Offset_RBV.PROC")
}

record(ai,"$(P)$(R)Ch$(N):Offset_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getFloat(:SOUR$(N):VOLT:LEV:IMM:OFFS) $(PORT)")
    field(LOPR, "-4.50")
    field(HOPR, "4.50")
    field(PREC, "2")
}

record(bo,"$(P)$(R)Ch$(N):OutputState") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setString(:OUTP$(N):STAT) $(PORT)")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
    field(FLNK, "$(P)$(R)Ch$(N):OutputState_RBV.PROC")
}

record(bi,"$(P)$(R)Ch$(N):OutputState_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getString(:OUTP$(N):STAT) $(PORT)")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
    field(VAL,  "1")
}

###
### Burst control
###
record(longout,"$(P)$(R)Ch$(N):BurstCycles") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setInt(:SOUR$(N):BURS:NCYC) $(PORT)")
    field(VAL,  "1")
    field(FLNK, "$(P)$(R)Ch$(N):BurstCycles_RBV.PROC")
}

record(longin,"$(P)$(R)Ch$(N):BurstCycles_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getInt(:SOUR$(N):BURS:NCYC) $(PORT)")
}

record(bo,"$(P)$(R)Ch$(N):BurstState") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setString(:SOUR$(N):BURS:STAT) $(PORT)")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
    field(FLNK, "$(P)$(R)Ch$(N):BurstState_RBV.PROC")
}

record(bi,"$(P)$(R)Ch$(N):BurstState_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getString(:SOUR$(N):BURS:STAT) $(PORT)")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
}

record(mbbo,"$(P)$(R)Ch$(N):BurstMode") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setString(:SOUR$(N):BURS:MODE) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "TRIG")
    field(ONVL, "1")
    field(ONST, "GAT")
    field(TWVL, "2")
    field(TWST, "INF")
    field(FLNK, "$(P)$(R)Ch$(N):BurstMode_RBV.PROC")
}

record(mbbi,"$(P)$(R)Ch$(N):BurstMode_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getString(:SOUR$(N):BURS:MODE) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "TRIG")
    field(ONVL, "1")
    field(ONST, "GAT")
    field(TWVL, "2")
    field(TWST, "INF")
}

record(ao,"$(P)$(R)Ch$(N):BurstPeriod") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setFloat(:SOUR$(N):BURS:INT:PER) $(PORT)")
    field(PREC, "$(PREC=4)")
    field(FLNK, "$(P)$(R)Ch$(N):BurstPeriod_RBV.PROC")
}

record(ai,"$(P)$(R)Ch$(N):BurstPeriod_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getFloat(:SOUR$(N):BURS:INT:PER) $(PORT)")
    field(PREC, "$(PREC=4)")
}

record(ao,"$(P)$(R)Ch$(N):BurstPhase") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setFloat(:SOUR$(N):BURS:PHAS) $(PORT)")
    field(DRVL, "0")
    field(DRVH, "360")
    field(LOPR, "0")
    field(HOPR, "360")
    field(PREC, "3")
    field(FLNK, "$(P)$(R)Ch$(N):BurstPhase_RBV.PROC")
}

record(ai,"$(P)$(R)Ch$(N):BurstPhase_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getFloat(:SOUR$(N):BURS:PHAS) $(PORT)")
    field(LOPR, "0")
    field(HOPR, "360")
    field(PREC, "3")
}

record(ao,"$(P)$(R)Ch$(N):BurstDelay") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setFloat(:SOUR$(N):BURS:TDEL) $(PORT)")
    field(PREC, "$(PREC=4)")
    field(FLNK, "$(P)$(R)Ch$(N):BurstPhase_RBV.PROC")
}

record(ai,"$(P)$(R)Ch$(N):BurstDelay_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getFloat(:SOUR$(N):BURS:TDEL) $(PORT)")
    field(PREC, "$(PREC=4)")
}

record(bo,"$(P)$(R)Ch$(N):BurstOnce") {
    field(PINI, "NO")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setNone(:SOUR$(N):BURS:TRIG:IMM) $(PORT)")
    field(ZNAM, "Off")
    field(ONAM, "Burst")
}

record(mbbo,"$(P)$(R)Ch$(N):BurstTrigSource") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setString(SOUR$(N):BURS:TRIG:SOUR) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "INT")
    field(ONVL, "1")
    field(ONST, "EXT")
    field(TWVL, "2")
    field(TWST, "MAN")
    field(FLNK, "$(P)$(R)Ch$(N):BurstTrigSource_RBV.PROC")
}

record(mbbi,"$(P)$(R)Ch$(N):BurstTrigSource_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getString(SOUR$(N):BURS:TRIG:SOUR) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "INT")
    field(ONVL, "1")
    field(ONST, "EXT")
    field(TWVL, "2")
    field(TWST, "MAN")
}

record(mbbo,"$(P)$(R)Ch$(N):BurstTrigSlope") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setString(:SOUR$(N):BURS:TRIG:SLOP) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "POS")
    field(ONVL, "1")
    field(ONST, "NEG")
    field(FLNK, "$(P)$(R)Ch$(N):BurstTrigSlope_RBV.PROC")
}

record(mbbi,"$(P)$(R)Ch$(N):BurstTrigSlope_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getString(:SOUR$(N):BURS:TRIG:SLOP) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "POS")
    field(ONVL, "1")
    field(ONST, "NEG")
}

record(mbbo,"$(P)$(R)Ch$(N):BurstTrigOut") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setString(:SOUR$(N):BURS:TRIG:TRIGO) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "OFF")
    field(ONVL, "1")
    field(ONST, "POS")
    field(TWVL, "2")
    field(TWST, "NEG")
    field(FLNK, "$(P)$(R)Ch$(N):BurstTrigOut_RBV.PROC")
}

record(mbbi,"$(P)$(R)Ch$(N):BurstTrigOut_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getString(:SOUR$(N):BURS:TRIG:TRIGO) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "OFF")
    field(ONVL, "1")
    field(ONST, "POS")
    field(TWVL, "2")
    field(TWST, "NEG")
}

record(mbbo,"$(P)$(R)Ch$(N):BurstGatePolarity") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DG4000.proto setString(:SOUR$(N):BURS:GATE:POL) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "NORM")
    field(ONVL, "1")
    field(ONST, "INV")
    field(FLNK, "$(P)$(R)Ch$(N):BurstGatePolarity_RBV.PROC")
}

record(mbbi,"$(P)$(R)Ch$(N):BurstGatePolarity_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto getString(:SOUR$(N):BURS:GATE:POL) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "NORM")
    field(ONVL, "1")
    field(ONST, "INV")
}

###
### User-defined waveforms
###
record(waveform,"$(P)$(R)Ch$(N):UserWF") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DG4000.proto setWaveform$(N) $(PORT)")
    field(FTVL, "DOUBLE")
    field(NELM, "$(NELM)")
    field(FLNK, "$(P)$(R)Ch$(N):SetUserMode")
}

record(stringout,"$(P)$(R)Ch$(N):SetUserMode") {
    field(OUT,  "$(P)$(R)Ch$(N):Shape PP")
    field(VAL,  "USER")
}
