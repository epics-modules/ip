# Rigol_DS1000Z_ChN.db

# Mark Rivers
# March 11, 2025

# Database file for Rigol DG4000 series Arbitrary Waveform Generator
# This file is loaded once for each channel N.
#
# This support uses StreamDevice.
# It supports many of the features of the device.  
# - It does not current support Modulation
# - It only supports the basic internal waveforms (sin, square, ramp, pulse, noise, and harmonic.), plus user-defined.
#
# The device has 16K channels of user-defineable waveform memory per channel.
#
# The UserWF waveform record has FTVL=DOUBLE, and the waveform values must be in the range -1 to +1.
# The actual waveform output is controlled by the Frequency, Amplitude, Phase, and Offset settings.
# The number of values written to UserWF can be any length between 2 and the value of NELM used when loading the database. 
#
# Macro parameters required when loading this database:
#  P = Record name prefix
#  R = Base record name
#  N = Channel number (1 or 2))
#  PORT = Name of asyn port for the VXI-11 driver for the device
#  NELM = Maximum number of elements in the UserWaveform waveform record
#


###
### Channel control
###
record(mbbo,"$(P)$(R)Ch$(N):Display") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DS1000Z.proto setString(:CHAN$(N):DISP) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "OFF")
    field(ONVL, "1")
    field(ONST, "ON")
    field(FLNK, "$(P)$(R)Ch$(N):Display_RBV.PROC")
}

record(mbbi,"$(P)$(R)Ch$(N):Display_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DS1000Z.proto getInt(:CHAN$(N):DISP) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "OFF")
    field(ONVL, "1")
    field(ONST, "ON")
}

record(mbbo,"$(P)$(R)Ch$(N):BWLimit") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DS1000Z.proto setString(:CHAN$(N):BWL) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "20M")
    field(ONVL, "1")
    field(ONST, "OFF")
    field(FLNK, "$(P)$(R)Ch$(N):BWLimit_RBV.PROC")
}

record(mbbi,"$(P)$(R)Ch$(N):BWLimit_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DS1000Z.proto getString(:CHAN$(N):BWL) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "20M")
    field(ONVL, "1")
    field(ONST, "OFF")
}

record(mbbo,"$(P)$(R)Ch$(N):Coupling") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DS1000Z.proto setString(:CHAN$(N):COUP) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "AC")
    field(ONVL, "1")
    field(ONST, "DC")
    field(TWVL, "2")
    field(TWST, "GND")
    field(FLNK, "$(P)$(R)Ch$(N):Coupling_RBV.PROC")
}

record(mbbi,"$(P)$(R)Ch$(N):Coupling_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DS1000Z.proto getString(:CHAN$(N):COUP) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "AC")
    field(ONVL, "1")
    field(ONST, "DC")
    field(TWVL, "2")
    field(TWST, "GND")
}

record(mbbo,"$(P)$(R)Ch$(N):Invert") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DS1000Z.proto setString(:CHAN$(N):INV) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "OFF")
    field(ONVL, "1")
    field(ONST, "ON")
    field(FLNK, "$(P)$(R)Ch$(N):Invert_RBV.PROC")
}

record(mbbi,"$(P)$(R)Ch$(N):Invert_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DS1000Z.proto getInt(:CHAN$(N):INV) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "OFF")
    field(ONVL, "1")
    field(ONST, "ON")
}

record(ao,"$(P)$(R)Ch$(N):Offset") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DS1000Z.proto setFloat(:CHAN$(N):OFFS) $(PORT)")
    field(PREC, "$(PREC=4)")
    field(FLNK, "$(P)$(R)Ch$(N):TrigLevel_RBV.PROC")
}

record(ai,"$(P)$(R)Ch$(N):Offset_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DS1000Z.proto getFloat(:CHAN$(N):OFFS) $(PORT)")
    field(PREC, "$(PREC=4)")
}

record(mbbo,"$(P)$(R)Ch$(N):Probe") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DS1000Z.proto setString(:CHAN$(N):PROB) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, ".01")
    field(ONVL, "1")
    field(ONST, ".02")
    field(TWVL, "2")
    field(TWST, ".05")
    field(THVL, "3")
    field(THST, "0.1")
    field(FRVL, "4")
    field(FRST, "0.2")
    field(FVVL, "5")
    field(FVST, "0.5")
    field(SXVL, "6")
    field(SXST, "1")
    field(SVVL, "7")
    field(SVST, "2")
    field(EIVL, "8")
    field(EIST, "5")
    field(NIVL, "9")
    field(NIST, "10")
    field(TEVL, "10")
    field(TEST, "20")
    field(ELVL, "11")
    field(ELST, "50")
    field(TVVL, "12")
    field(TVST, "100")
    field(TTVL, "13")
    field(TTST, "200")
    field(FTVL, "14")
    field(FTST, "500")
    field(FFVL, "15")
    field(FFST, "1000")
    field(FLNK, "$(P)$(R)Ch$(N):Probe_RBV.PROC")
}

record(ai,"$(P)$(R)Ch$(N):Probe_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DS1000Z.proto getFloat(:CHAN$(N):PROB) $(PORT)")
    field(PREC, "$(PREC=4)")
}

record(mbbo,"$(P)$(R)Ch$(N):Scale") {
    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DS1000Z.proto setString(:CHAN$(N):SCAL) $(PORT)")
    field(ZRVL, "0")
    field(ZRST, ".01")
    field(ONVL, "1")
    field(ONST, ".02")
    field(TWVL, "2")
    field(TWST, ".05")
    field(THVL, "3")
    field(THST, "0.1")
    field(FRVL, "4")
    field(FRST, "0.2")
    field(FVVL, "5")
    field(FVST, "0.5")
    field(SXVL, "6")
    field(SXST, "1")
    field(SVVL, "7")
    field(SVST, "2")
    field(EIVL, "8")
    field(EIST, "5")
    field(NIVL, "9")
    field(NIST, "10")
    field(TEVL, "10")
    field(TEST, "20")
    field(ELVL, "11")
    field(ELST, "50")
    field(TVVL, "12")
    field(TVST, "100")
    field(TTVL, "13")
    field(TTST, "200")
    field(FTVL, "14")
    field(FTST, "500")
    field(FFVL, "15")
    field(FFST, "1000")
    field(FLNK, "$(P)$(R)Ch$(N):Scale_RBV.PROC")
}

record(ai,"$(P)$(R)Ch$(N):Scale_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DS1000Z.proto getFloat(:CHAN$(N):SCAL) $(PORT)")
    field(PREC, "$(PREC=4)")
}

record(ao,"$(P)$(R)Ch$(N):Range") {
#    field(PINI, "YES")
    field(DTYP, "stream")
    field(OUT,  "@Rigol_DS1000Z.proto setFloat(:CHAN$(N):RANG) $(PORT)")
    field(PREC, "$(PREC=4)")
    field(FLNK, "$(P)$(R)Ch$(N):Range_RBV.PROC")
}

record(ai,"$(P)$(R)Ch$(N):Range_RBV") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DS1000Z.proto getFloat(:CHAN$(N):RANG) $(PORT)")
    field(PREC, "$(PREC=4)")
}

###
###  Waveforms
###
record(waveform,"$(P)$(R)Ch$(N):RawData") {
    field(DTYP, "stream")
    field(INP,  "@Rigol_DS1000Z.proto readWaveform(CHAN$(N)) $(PORT)")
    field(FTVL, "UCHAR")
    field(NELM, "$(NELM)")
    field(FLNK, "$(P)$(R)Ch$(N):Data")
}

record(acalcout, "$(P)$(R)Ch$(N):Data") {
    field(INAA, "$(P)$(R)Ch$(N):RawData")
    field(INPA, "$(P)$(R)Ch$(N):Scale_RBV")
    field(INPB, "$(P)$(R)Ch$(N):Offset_RBV")
    field(INPC, "$(P)$(R)Ch$(N):Display.RVAL")
    field(CALC, "((AA-127)*A/25-B)*C")
    field(NELM, "$(NELM)")
}

